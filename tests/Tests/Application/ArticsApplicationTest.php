<?php
namespace Tests\Application;

use Application\ArticsApplication;
use Veles\Routing\IniConfigLoader;
use Veles\Routing\RoutesConfig;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-19 at 10:28:25.
 */
class ArticsApplicationTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var ArticsApplication
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new ArticsApplication;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
        unset($_SERVER['REQUEST_METHOD']);
	}

    /**
     * @covers       Application\ArticsApplication::run
     *
     * @param $url
     * @param $expected_output
     * @param $method
     *
     * @dataProvider runProvider
     */
	public function testRun($url, $expected_output, $method)
	{
        $_SERVER['REQUEST_METHOD'] = $method;

        $this->expectOutputString($expected_output);

		$loader = new IniConfigLoader(realpath(__DIR__ . '/../../routes.ini'));
		$config = new RoutesConfig($loader);

		$route = $this->getMockBuilder('\Veles\Routing\Route')
			->setMethods(['getUri'])
			->getMock();
		$route->method('getUri')->willReturn($url);
		$route
			->setNotFoundException('\Exceptions\NotFoundException')
			->setConfigHandler($config)
			->init();

		$this->object->setRoute($route)->run();
	}

	public function runProvider()
	{
        $html = <<<EOL
<!DOCTYPE HTML>
<html manifest="">
<head>
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=10, user-scalable=yes">

	<title>Artics</title>

	<!--
	<script type="text/javascript">
		var Ext = Ext || {}; // Ext namespace won't be defined yet...

		// This function is called by the Microloader after it has performed basic
		// device detection. The results are provided in the "tags" object. You can
		// use these tags here or even add custom tags. These can be used by platform
		// filters in your manifest or by platformConfig expressions in your app.
		//
		Ext.beforeLoad = function (tags) {
			var s = location.search,  // the query string (ex "?foo=1&bar")
				profile;

			// For testing look for "?classic" or "?modern" in the URL to override
			// device detection default.
			//
			if (s.match(/\bclassic\b/)) {
				profile = 'classic';
			}
			else if (s.match(/\bmodern\b/)) {
				profile = 'modern';
			}
			else {
				profile = tags.desktop ? 'classic' : 'modern';
				//profile = tags.phone ? 'modern' : 'classic';
			}

			Ext.manifest = profile; // this name must match a build profile name

			// This function is called once the manifest is available but before
			// any data is pulled from it.
			//
			//return function (manifest) {
				// peek at / modify the manifest object
			//};
		};
	</script>
	-->

	<!-- The line below must be kept intact for Sencha Cmd to build your application -->
	<script id="microloader" data-app="615cec52-32ee-4f01-883b-d85e32a9e495" type="text/javascript" src="bootstrap.js"></script>

</head>
<body></body>
</html>

EOL;
		return [
			[ '/', $html, 'GET' ]
		];
	}
}
